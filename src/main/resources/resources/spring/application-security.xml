<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns:b="http://www.springframework.org/schema/beans"
	xmlns="http://www.springframework.org/schema/security" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<http pattern="/static/**" security="none"/>
	<http pattern="/file/**" security="none"/>
	<http entry-point-ref="restAuthenticationEntryPoint">
		<headers>
			<xss-protection />
		</headers>
		<csrf token-repository-ref="csrfTokenRepository" />

		<intercept-url pattern="/upload/**" access="ROLE_SPACE" />
		<intercept-url pattern="/my/file/**" access="ROLE_SPACE" />
		<intercept-url pattern="/my/blog/**" access="ROLE_SPACE" />
		<intercept-url pattern="/my/avatar/**" access="ROLE_USER,ROLE_OAUTH" />
		<intercept-url pattern="/my/nickname/**" access="ROLE_USER,ROLE_OAUTH" />
		<intercept-url pattern="/my/blog/category/**" access="ROLE_SPACE" />
		<intercept-url pattern="/my/password/**" access="ROLE_USER" />
		<intercept-url pattern="/my/comment/**" access="ROLE_USER,ROLE_OAUTH" />
		<intercept-url pattern="/my/message/send/**" access="ROLE_USER" />
		<intercept-url pattern="/my/message/receive/**" access="ROLE_USER,ROLE_OAUTH" />
		<intercept-url pattern="/my/page/**" access="ROLE_USER,ROLE_OAUTH" />
		<intercept-url pattern="/my/widget/**" access="ROLE_USER,ROLE_OAUTH" />
		<intercept-url pattern="/open/space" access="ROLE_USER" />
		<intercept-url pattern="/my/index" access="ROLE_USER,ROLE_OAUTH" />
		<intercept-url pattern="/manage/**" access="ROLE_SUPERVISOR" />
		<intercept-url pattern="/my/oauth/completeEmail" access="ROLE_OAUTH" />
		<intercept-url pattern="/my/oauth/authorizeEmail"
			access="ROLE_OAUTH" />
		<intercept-url pattern="/my/oauth/**" access="ROLE_USER" />

		<request-cache ref="requestCache" />
		<custom-filter ref="loginFilter" position="FORM_LOGIN_FILTER" />
		<custom-filter ref="rememberMeFilter" position="REMEMBER_ME_FILTER"/>
		<custom-filter ref="logoutFilter" position="LOGOUT_FILTER" />
		<custom-filter ref="qqOauth2AuthencationFilter" after="FORM_LOGIN_FILTER" />
	</http>
	
	<b:bean id="csrfTokenRepository" class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository"></b:bean>

	<b:bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<b:bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<b:property name="userDetailsService" ref="userDetailsService" />
		<b:property name="passwordEncoder" ref="passwordEncoder" />
		<b:property name="hideUserNotFoundExceptions" value="true" />
	</b:bean>

	<authentication-manager alias="authenticationManager"
		erase-credentials="true">
		<authentication-provider ref="rememberMeAuthenticationProvider" />
		<authentication-provider ref="daoAuthenticationProvider" />
		<authentication-provider ref="oauth2UserAuthenticationProvider" />
	</authentication-manager>

	<b:bean id="restAuthenticationEntryPoint" class="me.qyh.security.MyAuthenticationEntryPoint">
		<b:constructor-arg name="loginFormUrl" value="/login" />
	</b:bean>

	<b:bean id="requestCache"
		class="org.springframework.security.web.savedrequest.HttpSessionRequestCache">
		<b:property name="requestMatcher" ref="noAjaxRequestMatcher" />
	</b:bean>
	
	<b:bean id="loginFailureHandler" class="me.qyh.security.LoginFailureHandler"/>

	<b:bean id="loginFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<b:property name="requiresAuthenticationRequestMatcher">
			<b:bean class="me.qyh.security.DomainMatchRequestMatcher">
				<b:constructor-arg index="0" value="/login-check" />
			</b:bean>
		</b:property>
		<b:property name="authenticationFailureHandler" ref="loginFailureHandler" />
		<b:property name="authenticationSuccessHandler" ref="loginSuccessHandler" />
		<b:property name="authenticationManager" ref="authenticationManager" />
		<b:property name="rememberMeServices" ref="rememberMeServices" />
		<b:property name="sessionAuthenticationStrategy" ref="sessionStrategy" />
	</b:bean>

	<!-- 用来解决Session伪造攻击 ，tomcat context.xml 中sessionCookiePath不能为"/" -->
	<b:bean id="sessionStrategy"
		class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
		<b:constructor-arg index="0">
			<b:list>
				<!-- Servlet > 3.1中 org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy 
					是更好的选择 -->
				<b:bean
					class="org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy">
				</b:bean>
				<b:bean class="org.springframework.security.web.csrf.CsrfAuthenticationStrategy">
					<b:constructor-arg index="0" ref="csrfTokenRepository"/>
				</b:bean>
			</b:list>
		</b:constructor-arg>
	</b:bean>
	
	<b:bean id="qqOauth2AuthencationFilter" class="me.qyh.oauth2.security.Oauth2AuthencationFilter">
		<b:constructor-arg ref="oauth2Provider"/>
		<b:property name="authenticationFailureHandler" >
			<b:bean class="me.qyh.oauth2.security.Oauth2AuthenticationFailureHandler">
				<b:constructor-arg index="0" value="/oauth/bind/index"/>
			</b:bean>
		</b:property>
		<b:property name="authenticationSuccessHandler" ref="loginSuccessHandler" />
		<b:property name="authenticationManager" ref="authenticationManager" />
		<b:property name="sessionAuthenticationStrategy" ref="sessionStrategy" />
	</b:bean>

	<context:component-scan base-package="me.qyh.security">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Component" />
	</context:component-scan>

	<b:bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<b:property name="config">
			<b:bean class="com.google.code.kaptcha.util.Config">
				<b:constructor-arg type="java.util.Properties">
					<b:props>
						<b:prop key="kaptcha.image.width">300</b:prop>
						<b:prop key="kaptcha.image.height">50</b:prop>
						<b:prop key="kaptcha.textproducer.char.length">5</b:prop>
					</b:props>
				</b:constructor-arg>
			</b:bean>
		</b:property>
	</b:bean>

	<b:bean id="rememberMeServices"
		class="org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices">
		<b:property name="userDetailsService" ref="userDetailsService" />
		<b:property name="key" value="mhlx" />
		<b:property name="alwaysRemember" value="true" />
	</b:bean>

	<b:bean id="rememberMeFilter"
		class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
		<b:property name="rememberMeServices" ref="rememberMeServices" />
		<b:property name="authenticationManager" ref="authenticationManager" />
		<!-- <b:property name="authenticationSuccessHandler" ref="loginSuccessHandler"/> -->
	</b:bean>

	<b:bean id="rememberMeAuthenticationProvider"
		class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
		<b:property name="key" value="mhlx" />
	</b:bean>

	<b:bean id="logoutSuccessHandler" class="me.qyh.security.MyLogoutSuccessHandler">
		<b:constructor-arg index="0" value="/" />
	</b:bean>

	<b:bean id="logoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<b:constructor-arg name="logoutSuccessHandler" ref="logoutSuccessHandler" />
		<b:constructor-arg name="handlers">
			<b:array>
				<b:bean
					class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
				<b:ref bean="rememberMeServices" />
				<b:bean class="org.springframework.security.web.csrf.CsrfLogoutHandler">
					<b:constructor-arg index="0" ref="csrfTokenRepository"/>
				</b:bean>
			</b:array>
		</b:constructor-arg>
		<b:property name="logoutRequestMatcher">
			<b:bean id="logoutRequestMatcher" class="me.qyh.security.DomainMatchRequestMatcher">
				<b:constructor-arg index="0" value="/logout" />
				<b:constructor-arg index="1" value="POST"/>
			</b:bean>
		</b:property>
	</b:bean>
	
	
	<b:bean class="me.qyh.oauth2.security.DefaultOauthDetailsServiceImpl" />

	<!-- 安全认证 -->
	<b:bean id="oauth2UserAuthenticationProvider" class="me.qyh.oauth2.security.Oauth2UserAuthencationProvider" />

</b:beans>
